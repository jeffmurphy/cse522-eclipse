package com.x338x;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Student {
    protected JPanel mainpanel;
    private JTextArea codeEditor;
    private JButton compileButton;
    private JButton runButton;
    private JButton stepButton;
    private JButton resetButton;
    private JTable bytecodeTable;
    private JTable memoryTable;
    private JLabel pcLabel;
    private JLabel stLabel;
    private JLabel aregLabel;
    private JLabel bregLabel;
    private JButton acceptProgramButton;
    
    Program pgm;

    public Student() {
    	
        MemoryTableModel mtm = new MemoryTableModel();
        memoryTable.setModel(mtm);
        mtm.fireTableDataChanged();
        memoryTable.getColumnModel().getColumn(0).setMaxWidth(36);

        ByteCodeTableModel bctm = new ByteCodeTableModel();
        bytecodeTable.setModel(bctm);
        bytecodeTable.getColumnModel().getColumn(0).setMaxWidth(36);

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        bytecodeTable.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        memoryTable.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);


        VirtualMachine vm = new VirtualMachine(mtm, bytecodeTable, pcLabel, stLabel, aregLabel, bregLabel);

        Compiler compiler = new Compiler();
        
        acceptProgramButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                	writeProgram();
               
                } catch (Exception e1) {
                    e1.printStackTrace();
                    JOptionPane.showMessageDialog(mainpanel.getParent(),
                            e1.toString(),
                            "Write Program Error",
                            JOptionPane.ERROR_MESSAGE);
                }
                System.out.println("Accept Program finished.");
            }
        });
        
        compileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                	writeProgram();
                    compiler.compile(pgm.lst_stmnts);
                    bctm.setBytecode(compiler.byteCodes);
                    vm.setByteCodes(compiler.byteCodes);
                    vm.reset();
                } catch (Exception e1) {
                    e1.printStackTrace();
                    JOptionPane.showMessageDialog(mainpanel.getParent(),
                            e1.toString(),
                            "Compilation Error",
                            JOptionPane.ERROR_MESSAGE);
                }
                System.out.println("Compilation finished.");
            }
        });

        runButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    vm.setByteCodes(compiler.byteCodes);
                    vm.run();
                } catch (Exception e1) {
                    JOptionPane.showMessageDialog(mainpanel.getParent(),
                            e1.getMessage(),
                            "Execution Error",
                            JOptionPane.ERROR_MESSAGE);
                }
                System.out.println("Execution finished.");
            }
        });

        stepButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    moveNext(vm);
                } catch (Exception e1) {
                    JOptionPane.showMessageDialog(mainpanel.getParent(),
                            e1.getMessage(),
                            "Execution Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }

			private void moveNext(VirtualMachine vm) throws Exception {
				vm.step();
			}
        });

        resetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                vm.reset();
            }
        });
    }
    
    private void writeProgram()
    {
    	this.pgm = new Program(codeEditor.getText());
    }

    public static void main(String[] args) {
        Student mf = new Student();
        
        

        JFrame mainpanel = new JFrame("Compiler");
        mainpanel.setContentPane(mf.mainpanel);
        mainpanel.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainpanel.pack();
        mainpanel.setVisible(true);
    }

    {
    	// GUI initializer generated by IntelliJ IDEA GUI Designer
    	// >>> IMPORTANT!! <<<
    	// DO NOT EDIT OR ADD ANY CODE HERE!
    	        $$$setupUI$$$();
    	    }

    	    /**
    	     * Method generated by IntelliJ IDEA GUI Designer
    	     * >>> IMPORTANT!! <<<
    	     * DO NOT edit this method OR call it in your code!
    	     *
    	     * @noinspection ALL
    	     */
    	    private void $$$setupUI$$$() {
    	        mainpanel = new JPanel();
    	        mainpanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 3, new Insets(0, 0, 0, 0), -1, -1));
    	        final JScrollPane scrollPane1 = new JScrollPane();
    	        mainpanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 3, false));
    	        bytecodeTable = new JTable();
    	        scrollPane1.setViewportView(bytecodeTable);
    	        final JPanel panel1 = new JPanel();
    	        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 1, new Insets(0, 0, 0, 0), -1, -1));
    	        mainpanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    	        pcLabel = new JLabel();
    	        pcLabel.setText("PC");
    	        panel1.add(pcLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    	        stLabel = new JLabel();
    	        stLabel.setText("ST");
    	        panel1.add(stLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    	        aregLabel = new JLabel();
    	        aregLabel.setText("A");
    	        panel1.add(aregLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    	        bregLabel = new JLabel();
    	        bregLabel.setText("B");
    	        panel1.add(bregLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    	        compileButton = new JButton();
    	        compileButton.setText("Compile");
    	        panel1.add(compileButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    	        runButton = new JButton();
    	        runButton.setText("Run");
    	        panel1.add(runButton, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    	        stepButton = new JButton();
    	        stepButton.setText("Step");
    	        panel1.add(stepButton, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    	        resetButton = new JButton();
    	        resetButton.setText("Reset");
    	        panel1.add(resetButton, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    	        final JScrollPane scrollPane2 = new JScrollPane();
    	        mainpanel.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    	        codeEditor = new JTextArea();
    	        Font codeEditorFont = this.$$$getFont$$$("Courier", -1, -1, codeEditor.getFont());
    	        if (codeEditorFont != null) codeEditor.setFont(codeEditorFont);
    	        codeEditor.setRows(9);
    	        codeEditor.setText("    LD A, 10\n    LD B, 1\nL1: SUB A, B\n    ST A, @0\n    ST B, @1\n    BNZ A, L1\n    LD B, 5\n    ST B, @2\n\n    HALT");
    	        scrollPane2.setViewportView(codeEditor);
    	        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
    	        mainpanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(500, -1), new Dimension(500, -1), null, 2, false));
    	        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
    	        mainpanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(200, -1), new Dimension(200, -1), 1, false));
    	        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
    	        mainpanel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(7, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(500, -1), new Dimension(500, -1), new Dimension(500, -1), 1, false));
    	        final JScrollPane scrollPane3 = new JScrollPane();
    	        mainpanel.add(scrollPane3, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    	        memoryTable = new JTable();
    	        scrollPane3.setViewportView(memoryTable);
    	        final JLabel label1 = new JLabel();
    	        label1.setText("Memory Table");
    	        mainpanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    	        final JLabel label2 = new JLabel();
    	        label2.setText("Bytecode Table");
    	        mainpanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    	        final JLabel label3 = new JLabel();
    	        label3.setText("Code Editor");
    	        mainpanel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    	        acceptProgramButton = new JButton();
    	        acceptProgramButton.setText("Accept Program");
    	        mainpanel.add(acceptProgramButton, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    	    }

    	    /**
    	     * @noinspection ALL
    	     */
    	    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    	        if (currentFont == null) return null;
    	        String resultName;
    	        if (fontName == null) {
    	            resultName = currentFont.getName();
    	        } else {
    	            Font testFont = new Font(fontName, Font.PLAIN, 10);
    	            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
    	                resultName = fontName;
    	            } else {
    	                resultName = currentFont.getName();
    	            }
    	        }
    	        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    	    }

    	    /**
    	     * @noinspection ALL
    	     */
    	    public JComponent $$$getRootComponent$$$() {
    	        return mainpanel;
    	    }
    	}
